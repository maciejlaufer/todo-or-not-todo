// Code generated by sqlc. DO NOT EDIT.
// source: list.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createList = `-- name: CreateList :one
INSERT INTO lists (
	name,
	user_id
) VALUES (
	$1, $2
) RETURNING id, name, user_id, created_at
`

type CreateListParams struct {
	Name   string    `json:"name"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (List, error) {
	row := q.queryRow(ctx, q.createListStmt, createList, arg.Name, arg.UserID)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM lists WHERE id = $1
`

func (q *Queries) DeleteList(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteListStmt, deleteList, id)
	return err
}

const getList = `-- name: GetList :one
SELECT id, name, user_id, created_at FROM lists
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetList(ctx context.Context, id uuid.UUID) (List, error) {
	row := q.queryRow(ctx, q.getListStmt, getList, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getListsByUserId = `-- name: GetListsByUserId :many
SELECT id, name, user_id, created_at FROM lists
WHERE user_id = $1
ORDER BY created_at
`

func (q *Queries) GetListsByUserId(ctx context.Context, userID uuid.UUID) ([]List, error) {
	rows, err := q.query(ctx, q.getListsByUserIdStmt, getListsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []List{}
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateList = `-- name: UpdateList :one
UPDATE lists
SET name = $2
WHERE id = $1
RETURNING id, name, user_id, created_at
`

type UpdateListParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateList(ctx context.Context, arg UpdateListParams) (List, error) {
	row := q.queryRow(ctx, q.updateListStmt, updateList, arg.ID, arg.Name)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}
